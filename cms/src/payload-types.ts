/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    movies: Movie;
    filmPrints: FilmPrint;
    events: Event;
    screeningSeries: ScreeningSery;
    posts: Post;
    mailings: Mailing;
    media: Media;
    pages: Page;
    formats: Format;
    aspectRatios: AspectRatio;
    carriers: Carrier;
    languageVersions: LanguageVersion;
    soundFormats: SoundFormat;
    conditions: Condition;
    seasons: Season;
    genres: Genre;
    locations: Location;
    rentals: Rental;
    colors: Color;
    categories: Category;
    persons: Person;
    jobs: Job;
    companies: Company;
    countries: Country;
    navigations: Navigation;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    movies: MoviesSelect<false> | MoviesSelect<true>;
    filmPrints: FilmPrintsSelect<false> | FilmPrintsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    screeningSeries: ScreeningSeriesSelect<false> | ScreeningSeriesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    mailings: MailingsSelect<false> | MailingsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    formats: FormatsSelect<false> | FormatsSelect<true>;
    aspectRatios: AspectRatiosSelect<false> | AspectRatiosSelect<true>;
    carriers: CarriersSelect<false> | CarriersSelect<true>;
    languageVersions: LanguageVersionsSelect<false> | LanguageVersionsSelect<true>;
    soundFormats: SoundFormatsSelect<false> | SoundFormatsSelect<true>;
    conditions: ConditionsSelect<false> | ConditionsSelect<true>;
    seasons: SeasonsSelect<false> | SeasonsSelect<true>;
    genres: GenresSelect<false> | GenresSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    rentals: RentalsSelect<false> | RentalsSelect<true>;
    colors: ColorsSelect<false> | ColorsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    persons: PersonsSelect<false> | PersonsSelect<true>;
    jobs: JobsSelect<false> | JobsSelect<true>;
    companies: CompaniesSelect<false> | CompaniesSelect<true>;
    countries: CountriesSelect<false> | CountriesSelect<true>;
    navigations: NavigationsSelect<false> | NavigationsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    site: Site;
  };
  globalsSelect: {
    site: SiteSelect<false> | SiteSelect<true>;
  };
  locale: 'de' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movies".
 */
export interface Movie {
  id: string;
  /**
   * Titel des Films, wie er auf der Webseite verwendet wird. Übersetzungen können in den Sprachversionen angelegt werden.
   */
  title: string;
  /**
   * Internationaler Titel des Films, gewöhnlich der englische Titel
   */
  internationalTitle: string;
  /**
   * Originaltitel des Films
   */
  originalTitle: string;
  tmdbId?: number | null;
  /**
   * Titelbild im Querformat (16:9 o.ä.) mit einer Mindestbreite von 2000px. In der Regel sollte ein Standbild aus dem Film verwendet werden.
   */
  still: string | Media;
  /**
   * Filmposter im Porträtformat (2:3) mit einer Mindestbreite von 200px
   */
  poster: string | Media;
  directors: (string | Person)[];
  /**
   * Dauer in Minuten
   */
  duration: number;
  ageRating?: ('0' | '6' | '12' | '16' | '18' | '') | null;
  countries: (string | Country)[];
  year: number;
  decade: number;
  isHfgProduction?: boolean | null;
  genres: (string | Genre)[];
  /**
   * Kurze Inhaltsangabe, maximal 350 Zeichen
   */
  synopsis: string;
  trailer?: string | null;
  cast?: (string | Person)[] | null;
  crew?:
    | {
        person: string | Person;
        job: string | Job;
        id?: string | null;
      }[]
    | null;
  productionCompanies?: (string | Company)[] | null;
  /**
   * Komma-getrennte Tags.
   */
  tags?: string | null;
  isMigratedFromWordpress?: boolean | null;
  wordpressMigrationNotes?: string | null;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Leer lassen, um den Dateinamen als Alt-Text zu verwenden
   */
  alt?: string | null;
  tmdbFilepath?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons".
 */
export interface Person {
  id: string;
  name: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries".
 */
export interface Country {
  /**
   * Ländercode (2-stellig)
   */
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres".
 */
export interface Genre {
  id: string;
  name: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs".
 */
export interface Job {
  id: string;
  name: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companies".
 */
export interface Company {
  id: string;
  name: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "filmPrints".
 */
export interface FilmPrint {
  id: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  title?: string | null;
  movie: string | Movie;
  type?: ('analog' | 'digital') | null;
  format: string | Format;
  languageVersion: string | LanguageVersion;
  isRented?: boolean | null;
  rental?: (string | null) | Rental;
  carrier?: (string | null) | Carrier;
  category?: (string | null) | Category;
  numActs?: number | null;
  aspectRatio?: (string | null) | AspectRatio;
  color?: (string | null) | Color;
  soundFormat?: (string | null) | SoundFormat;
  condition?: (string | null) | Condition;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formats".
 */
export interface Format {
  id: string;
  type?: ('analog' | 'digital') | null;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languageVersions".
 */
export interface LanguageVersion {
  id: string;
  name: string;
  abbreviation: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rentals".
 */
export interface Rental {
  id: string;
  name: string;
  logo?: (string | null) | Media;
  /**
   * In allen Sprachen bearbeiten!
   */
  credits: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carriers".
 */
export interface Carrier {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aspectRatios".
 */
export interface AspectRatio {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "colors".
 */
export interface Color {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "soundFormats".
 */
export interface SoundFormat {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conditions".
 */
export interface Condition {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  type?: ('screening' | 'event') | null;
  /**
   * Leer lassen, um den Titel des ersten Spielfilms zu verwenden, falls es sich um eine Vorstellung handelt
   */
  title?: string | null;
  subtitle?: string | null;
  /**
   * Achtung: wenn du dich in einer anderen Zeitzone als das Kino befindest, musst du den Unterschied ausgleichen.
   */
  date: string;
  location?: (string | null) | Location;
  season: string | Season;
  series?: (string | null) | ScreeningSery;
  header?: (string | null) | Media;
  poster?: (string | null) | Media;
  /**
   * Infos zur Veranstaltung. Bei Veranstaltungen ohne Filme bildet das den Hauptinhalt.
   */
  info?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  films?:
    | {
        filmprint: string | FilmPrint;
        isSupportingFilm?: boolean | null;
        /**
         * Infos zum Film / der Kopie.
         */
        info?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  moderator?: string | null;
  guest?: string | null;
  /**
   * Wenn der Haken gesetzt ist, wird die Vorstellung nicht auf der Startseite und in der Liste der kommenden Vorstellungen angezeigt.
   */
  excludeFromUpcoming?: boolean | null;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  name?: string | null;
  default?: boolean | null;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seasons".
 */
export interface Season {
  id: string;
  name: string;
  header: string | Media;
  sort?: string | null;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "screeningSeries".
 */
export interface ScreeningSery {
  id: string;
  name: string;
  hero?: {
    type?: ('image' | 'headline' | 'none') | null;
    headline?: string | null;
    image?: (string | null) | Media;
  };
  blocks?:
    | (
        | ContentBlockType
        | GalleryBlockType
        | ImageBlockType
        | VideoBlockType
        | EventsBlockType
        | KronolithCalendarEmbedBlockType
      )[]
    | null;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlockType".
 */
export interface ContentBlockType {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlockType".
 */
export interface GalleryBlockType {
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'gallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlockType".
 */
export interface ImageBlockType {
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'image';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlockType".
 */
export interface VideoBlockType {
  url: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'video';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventsBlockType".
 */
export interface EventsBlockType {
  type: 'manual' | 'screeningSeries';
  events?:
    | {
        doc: string | Event;
        id?: string | null;
      }[]
    | null;
  screeningSeries?: (string | null) | ScreeningSery;
  id?: string | null;
  blockName?: string | null;
  blockType: 'events';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KronolithCalendarEmbedBlockType".
 */
export interface KronolithCalendarEmbedBlockType {
  /**
   * z.B. https://webmail.hfg-karlsruhe.de/services/ajax.php/kronolith/embed?token=bGumTYVcPSXJCOnQq5ddVk1&calendar=internal_hwwfPnACHMVRk4ZwVVQ4V--&container=kronolithCal&view=Monthlist
   */
  url: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'kronolithCalendarEmbed';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  date: string;
  header: string | Media;
  link?: {
    /**
     * Wähle 'Keine(r)' um das Titelbild mit der Detailseite zu verlinken, falls diese existiert.
     */
    type?: ('none' | 'internal' | 'external') | null;
    doc?:
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'events';
          value: string | Event;
        } | null)
      | ({
          relationTo: 'screeningSeries';
          value: string | ScreeningSery;
        } | null)
      | ({
          relationTo: 'filmPrints';
          value: string | FilmPrint;
        } | null)
      | ({
          relationTo: 'seasons';
          value: string | Season;
        } | null);
    url?: string | null;
  };
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Ausführliche Informationen zum Beitrag. Hieraus wird die Detailseite für den Post generiert. Ein Post kann auch ohne Detailseite existieren.
   */
  details?: (ContentBlockType | ImageBlockType | GalleryBlockType | VideoBlockType)[] | null;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  layoutType?: ('default' | 'info') | null;
  hero?: {
    type?: ('image' | 'headline' | 'none') | null;
    headline?: string | null;
    image?: (string | null) | Media;
  };
  blocks?:
    | (
        | ContentBlockType
        | GalleryBlockType
        | ImageBlockType
        | VideoBlockType
        | EventsBlockType
        | KronolithCalendarEmbedBlockType
      )[]
    | null;
  url: string;
  /**
   * Wird automatisch generiert, wenn das Feld leer ist.
   */
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mailings".
 */
export interface Mailing {
  id: string;
  subject: string;
  color?: string | null;
  language?: ('en' | 'de') | null;
  header?: {
    image?: (string | null) | Media;
    overlay?: (string | null) | Media;
  };
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  footer?: {
    image?: (string | null) | Media;
    label?: string | null;
    link?: string | null;
  };
  html?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigations".
 */
export interface Navigation {
  id: string;
  type: 'main' | 'mobile' | 'footer' | 'socialMedia' | 'subnavigation';
  items?:
    | {
        type?: ('internal' | 'external' | 'subnavigation' | 'language') | null;
        name?: string | null;
        page?: (string | null) | Page;
        relPath?: string | null;
        url?: string | null;
        icon?: (string | null) | Media;
        subnavigation?: (string | null) | Navigation;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role?: ('admin' | 'editor') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'movies';
        value: string | Movie;
      } | null)
    | ({
        relationTo: 'filmPrints';
        value: string | FilmPrint;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'screeningSeries';
        value: string | ScreeningSery;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'mailings';
        value: string | Mailing;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'formats';
        value: string | Format;
      } | null)
    | ({
        relationTo: 'aspectRatios';
        value: string | AspectRatio;
      } | null)
    | ({
        relationTo: 'carriers';
        value: string | Carrier;
      } | null)
    | ({
        relationTo: 'languageVersions';
        value: string | LanguageVersion;
      } | null)
    | ({
        relationTo: 'soundFormats';
        value: string | SoundFormat;
      } | null)
    | ({
        relationTo: 'conditions';
        value: string | Condition;
      } | null)
    | ({
        relationTo: 'seasons';
        value: string | Season;
      } | null)
    | ({
        relationTo: 'genres';
        value: string | Genre;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'rentals';
        value: string | Rental;
      } | null)
    | ({
        relationTo: 'colors';
        value: string | Color;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'persons';
        value: string | Person;
      } | null)
    | ({
        relationTo: 'jobs';
        value: string | Job;
      } | null)
    | ({
        relationTo: 'companies';
        value: string | Company;
      } | null)
    | ({
        relationTo: 'countries';
        value: string | Country;
      } | null)
    | ({
        relationTo: 'navigations';
        value: string | Navigation;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movies_select".
 */
export interface MoviesSelect<T extends boolean = true> {
  title?: T;
  internationalTitle?: T;
  originalTitle?: T;
  tmdbId?: T;
  still?: T;
  poster?: T;
  directors?: T;
  duration?: T;
  ageRating?: T;
  countries?: T;
  year?: T;
  decade?: T;
  isHfgProduction?: T;
  genres?: T;
  synopsis?: T;
  trailer?: T;
  cast?: T;
  crew?:
    | T
    | {
        person?: T;
        job?: T;
        id?: T;
      };
  productionCompanies?: T;
  tags?: T;
  isMigratedFromWordpress?: T;
  wordpressMigrationNotes?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "filmPrints_select".
 */
export interface FilmPrintsSelect<T extends boolean = true> {
  title?: T;
  movie?: T;
  type?: T;
  format?: T;
  languageVersion?: T;
  isRented?: T;
  rental?: T;
  carrier?: T;
  category?: T;
  numActs?: T;
  aspectRatio?: T;
  color?: T;
  soundFormat?: T;
  condition?: T;
  url?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  type?: T;
  title?: T;
  subtitle?: T;
  date?: T;
  location?: T;
  season?: T;
  series?: T;
  header?: T;
  poster?: T;
  info?: T;
  films?:
    | T
    | {
        filmprint?: T;
        isSupportingFilm?: T;
        info?: T;
        id?: T;
      };
  moderator?: T;
  guest?: T;
  excludeFromUpcoming?: T;
  url?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "screeningSeries_select".
 */
export interface ScreeningSeriesSelect<T extends boolean = true> {
  name?: T;
  hero?:
    | T
    | {
        type?: T;
        headline?: T;
        image?: T;
      };
  blocks?:
    | T
    | {
        content?: T | ContentBlockTypeSelect<T>;
        gallery?: T | GalleryBlockTypeSelect<T>;
        image?: T | ImageBlockTypeSelect<T>;
        video?: T | VideoBlockTypeSelect<T>;
        events?: T | EventsBlockTypeSelect<T>;
        kronolithCalendarEmbed?: T | KronolithCalendarEmbedBlockTypeSelect<T>;
      };
  url?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlockType_select".
 */
export interface ContentBlockTypeSelect<T extends boolean = true> {
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlockType_select".
 */
export interface GalleryBlockTypeSelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlockType_select".
 */
export interface ImageBlockTypeSelect<T extends boolean = true> {
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlockType_select".
 */
export interface VideoBlockTypeSelect<T extends boolean = true> {
  url?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventsBlockType_select".
 */
export interface EventsBlockTypeSelect<T extends boolean = true> {
  type?: T;
  events?:
    | T
    | {
        doc?: T;
        id?: T;
      };
  screeningSeries?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KronolithCalendarEmbedBlockType_select".
 */
export interface KronolithCalendarEmbedBlockTypeSelect<T extends boolean = true> {
  url?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  date?: T;
  header?: T;
  link?:
    | T
    | {
        type?: T;
        doc?: T;
        url?: T;
      };
  content?: T;
  details?:
    | T
    | {
        content?: T | ContentBlockTypeSelect<T>;
        image?: T | ImageBlockTypeSelect<T>;
        gallery?: T | GalleryBlockTypeSelect<T>;
        video?: T | VideoBlockTypeSelect<T>;
      };
  url?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mailings_select".
 */
export interface MailingsSelect<T extends boolean = true> {
  subject?: T;
  color?: T;
  language?: T;
  header?:
    | T
    | {
        image?: T;
        overlay?: T;
      };
  content?: T;
  footer?:
    | T
    | {
        image?: T;
        label?: T;
        link?: T;
      };
  html?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  tmdbFilepath?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layoutType?: T;
  hero?:
    | T
    | {
        type?: T;
        headline?: T;
        image?: T;
      };
  blocks?:
    | T
    | {
        content?: T | ContentBlockTypeSelect<T>;
        gallery?: T | GalleryBlockTypeSelect<T>;
        image?: T | ImageBlockTypeSelect<T>;
        video?: T | VideoBlockTypeSelect<T>;
        events?: T | EventsBlockTypeSelect<T>;
        kronolithCalendarEmbed?: T | KronolithCalendarEmbedBlockTypeSelect<T>;
      };
  url?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formats_select".
 */
export interface FormatsSelect<T extends boolean = true> {
  type?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aspectRatios_select".
 */
export interface AspectRatiosSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carriers_select".
 */
export interface CarriersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languageVersions_select".
 */
export interface LanguageVersionsSelect<T extends boolean = true> {
  name?: T;
  abbreviation?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "soundFormats_select".
 */
export interface SoundFormatsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conditions_select".
 */
export interface ConditionsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seasons_select".
 */
export interface SeasonsSelect<T extends boolean = true> {
  name?: T;
  header?: T;
  sort?: T;
  url?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres_select".
 */
export interface GenresSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  default?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rentals_select".
 */
export interface RentalsSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  credits?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "colors_select".
 */
export interface ColorsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons_select".
 */
export interface PersonsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs_select".
 */
export interface JobsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companies_select".
 */
export interface CompaniesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries_select".
 */
export interface CountriesSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigations_select".
 */
export interface NavigationsSelect<T extends boolean = true> {
  type?: T;
  items?:
    | T
    | {
        type?: T;
        name?: T;
        page?: T;
        relPath?: T;
        url?: T;
        icon?: T;
        subnavigation?: T;
        newTab?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site".
 */
export interface Site {
  id: string;
  logo?: (string | null) | Media;
  logoMobile?: (string | null) | Media;
  favicon?: (string | null) | Media;
  footerContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  location: {
    country: string | Country;
    region: string;
    city: string;
    zip: string;
    street: string;
    name: string;
    latitude: string;
    longitude: string;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site_select".
 */
export interface SiteSelect<T extends boolean = true> {
  logo?: T;
  logoMobile?: T;
  favicon?: T;
  footerContent?: T;
  location?:
    | T
    | {
        country?: T;
        region?: T;
        city?: T;
        zip?: T;
        street?: T;
        name?: T;
        latitude?: T;
        longitude?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}